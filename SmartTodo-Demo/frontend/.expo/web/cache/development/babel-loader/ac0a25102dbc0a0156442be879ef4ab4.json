{"ast":null,"code":"import _taggedTemplateLiteralLoose from \"@babel/runtime/helpers/taggedTemplateLiteralLoose\";\n\nvar _templateObject;\n\nimport React, { useState, useCallback, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport ListRenderedTodos from \"./ListRenderedTodos\";\nimport { useQuery } from '@apollo/client';\nimport { SET_DONE_LIST, SET_IN_PROGRESS_LIST, UPDATE_FULL_LIST } from \"../../reduxApi/notesList/notesToolkit\";\nimport { fullList } from \"../../reduxApi/notesList/notesSelectors\";\nimport useDeleteNote from \"../../helpers/useDeleteNote\";\nimport useUpdateNote from \"../../helpers/useUpdateNote\";\nimport { gql } from '@apollo/client';\nexport var GET_ALL_USERS = gql(_templateObject || (_templateObject = _taggedTemplateLiteralLoose([\"\\n  fragment userFields on User {\\n    id\\n    username\\n    age\\n    posts {\\n      content\\n    }\\n  }\\n\\n  query {\\n    getAllUsers {\\n      ...userFields\\n    }\\n  }\\n\"])));\n\nfunction GraphListContainer() {\n  var _useQuery = useQuery(GET_ALL_USERS, {}),\n      data = _useQuery.data,\n      loading = _useQuery.loading,\n      refetch = _useQuery.refetch;\n\n  console.log('data', data);\n  return React.createElement(View, {\n    style: styles.renderBlock\n  });\n}\n\nexport default GraphListContainer;\nvar listStyle = {\n  containerStyle: {\n    paddingBottom: '65%'\n  }\n};\nvar styles = StyleSheet.create({\n  renderBlock: {\n    marginTop: 10,\n    justifyContent: 'space-between',\n    paddingHorizontal: 15,\n    width: '100%'\n  },\n  greetingView: {\n    display: 'flex',\n    alignSelf: 'center',\n    textAlign: 'center',\n    marginTop: 20\n  },\n  greetingText: {\n    fontSize: 16,\n    fontWeight: '200',\n    color: 'rgba(135, 135, 135, 1)'\n  }\n});","map":{"version":3,"sources":["/Users/nikitahadnevic/Documents/JS_BackUp/JS/ReactNative/SmartTodo-Demo/frontend/src/pages/GraphList/GraphListContainer.js"],"names":["React","useState","useCallback","useEffect","useDispatch","useSelector","ListRenderedTodos","useQuery","SET_DONE_LIST","SET_IN_PROGRESS_LIST","UPDATE_FULL_LIST","fullList","useDeleteNote","useUpdateNote","gql","GET_ALL_USERS","GraphListContainer","data","loading","refetch","console","log","styles","renderBlock","listStyle","containerStyle","paddingBottom","StyleSheet","create","marginTop","justifyContent","paddingHorizontal","width","greetingView","display","alignSelf","textAlign","greetingText","fontSize","fontWeight","color"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,WAA1B,EAAuCC,SAAvC,QAAwD,OAAxD;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;;;;;;AAEA,OAAOC,iBAAP;AACA,SAASC,QAAT,QAAyB,gBAAzB;AAEA,SACEC,aADF,EAEEC,oBAFF,EAGEC,gBAHF;AAKA,SAASC,QAAT;AAEA,OAAOC,aAAP;AACA,OAAOC,aAAP;AAEA,SAASC,GAAT,QAAoB,gBAApB;AAEA,OAAO,IAAMC,aAAa,GAAGD,GAAH,qPAAnB;;AAiBP,SAASE,kBAAT,GAA8B;AAC5B,kBAAmCT,QAAQ,CAACQ,aAAD,EAAgB,EAAhB,CAA3C;AAAA,MAAQE,IAAR,aAAQA,IAAR;AAAA,MAAcC,OAAd,aAAcA,OAAd;AAAA,MAAuBC,OAAvB,aAAuBA,OAAvB;;AAKAC,EAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBJ,IAApB;AAEA,SACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEK,MAAM,CAACC;AAApB,IADF;AAkBD;;AAED,eAAeP,kBAAf;AAEA,IAAMQ,SAAS,GAAG;AAChBC,EAAAA,cAAc,EAAE;AACdC,IAAAA,aAAa,EAAE;AADD;AADA,CAAlB;AAMA,IAAMJ,MAAM,GAAGK,UAAU,CAACC,MAAX,CAAkB;AAC/BL,EAAAA,WAAW,EAAE;AACXM,IAAAA,SAAS,EAAE,EADA;AAEXC,IAAAA,cAAc,EAAE,eAFL;AAGXC,IAAAA,iBAAiB,EAAE,EAHR;AAIXC,IAAAA,KAAK,EAAE;AAJI,GADkB;AAO/BC,EAAAA,YAAY,EAAE;AACZC,IAAAA,OAAO,EAAE,MADG;AAEZC,IAAAA,SAAS,EAAE,QAFC;AAGZC,IAAAA,SAAS,EAAE,QAHC;AAIZP,IAAAA,SAAS,EAAE;AAJC,GAPiB;AAa/BQ,EAAAA,YAAY,EAAE;AACZC,IAAAA,QAAQ,EAAE,EADE;AAEZC,IAAAA,UAAU,EAAE,KAFA;AAGZC,IAAAA,KAAK,EAAE;AAHK;AAbiB,CAAlB,CAAf","sourcesContent":["import React, { useState, useCallback, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { View, Text, StyleSheet, FlatList, Animated } from 'react-native';\nimport ListRenderedTodos from './ListRenderedTodos';\nimport { useQuery } from '@apollo/client';\n\nimport {\n  SET_DONE_LIST,\n  SET_IN_PROGRESS_LIST,\n  UPDATE_FULL_LIST,\n} from '../../reduxApi/notesList/notesToolkit';\nimport { fullList } from '../../reduxApi/notesList/notesSelectors';\n\nimport useDeleteNote from '../../helpers/useDeleteNote';\nimport useUpdateNote from '../../helpers/useUpdateNote';\n\nimport { gql } from '@apollo/client';\n\nexport const GET_ALL_USERS = gql`\n  fragment userFields on User {\n    id\n    username\n    age\n    posts {\n      content\n    }\n  }\n\n  query {\n    getAllUsers {\n      ...userFields\n    }\n  }\n`;\n\nfunction GraphListContainer() {\n  const { data, loading, refetch } = useQuery(GET_ALL_USERS, {\n    // ОПЦИИ КАК У React Query\n    // pollInterval: 5000, //  Отправляет запрос каждые пол секунды, тем самым не нужен рефетч\n  });\n\n  console.log('data', data);\n\n  return (\n    <View style={styles.renderBlock}>\n      {/* {data?.getAllUsers?.length ? (\n        <FlatList\n          contentContainerStyle={listStyle.containerStyle}\n          data={data.getAllUsers}\n          keyExtractor={(item) => item.id.toString()}\n          renderItem={({ item, index }) => (\n            <ListRenderedTodos item={item} index={index} />\n          )}\n        />\n      ) : (\n        <View style={styles.greetingView}>\n          <Text style={styles.greetingText}>Add Note...</Text>\n        </View>\n      )} */}\n    </View>\n  );\n}\n\nexport default GraphListContainer;\n\nconst listStyle = {\n  containerStyle: {\n    paddingBottom: '65%',\n  },\n};\n\nconst styles = StyleSheet.create({\n  renderBlock: {\n    marginTop: 10,\n    justifyContent: 'space-between',\n    paddingHorizontal: 15,\n    width: '100%',\n  },\n  greetingView: {\n    display: 'flex',\n    alignSelf: 'center',\n    textAlign: 'center',\n    marginTop: 20,\n  },\n  greetingText: {\n    fontSize: 16,\n    fontWeight: '200',\n    color: 'rgba(135, 135, 135, 1)',\n  },\n});\n"]},"metadata":{},"sourceType":"module"}