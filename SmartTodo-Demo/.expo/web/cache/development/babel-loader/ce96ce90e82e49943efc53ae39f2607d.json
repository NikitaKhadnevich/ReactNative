{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/nikitahadnevic/Documents/JS_BackUp/JS/ReactNative/SmartTodo-Demo/App.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { StatusBar } from \"expo-status-bar\";\nimport React, { useState } from \"react\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { SET_FULL_LIST } from \"./src/reduxApi/notesList/notesToolkit\";\nimport Navbar from \"./src/components/Navbar/Navbar\";\nimport AddTodo from \"./src/components/InputNoteField/InputNoteField\";\nimport NoteListContainer from \"./src/pages/NotesList/NoteListContainer\";\nimport { Provider } from \"react-redux\";\nimport store from \"./store\";\nexport default function App() {\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      mainTodo = _useState2[0],\n      setMainTodo = _useState2[1];\n\n  var addNotes = function addNotes(currentTitile) {\n    var date = new Date().toLocaleDateString();\n    var time = new Date().toLocaleTimeString();\n    var newTodo = {\n      id: Date.now().toString(),\n      title: currentTitile,\n      todoStatus: true,\n      date: date + \" \" + time\n    };\n    dispatch(SET_FULL_LIST(newTodo));\n    setMainTodo(function (prev) {\n      return [].concat(_toConsumableArray(prev), [newTodo]);\n    });\n  };\n\n  var letDeleteTodo = function letDeleteTodo(id) {\n    setMainTodo(function (prev) {\n      return prev.filter(function (item) {\n        return item.id !== id;\n      });\n    });\n  };\n\n  var updateStatus = function updateStatus(id, status) {\n    var itemData = mainTodo.map(function (item) {\n      return item.id === id ? _objectSpread(_objectSpread({}, item), {}, {\n        todoStatus: status\n      }) : item;\n    });\n    setMainTodo(_toConsumableArray(itemData));\n  };\n\n  return React.createElement(Provider, {\n    store: store,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 5\n    }\n  }, React.createElement(View, {\n    style: styles.mainContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }\n  }, React.createElement(Navbar, {\n    title: \"Yours Todo\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }\n  }), React.createElement(AddTodo, {\n    addNotes: addNotes,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }\n  }), React.createElement(NoteListContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }\n  })));\n}\nvar styles = StyleSheet.create({\n  mainContainer: {\n    flex: 1,\n    flexDirection: \"column\",\n    backgroundColor: \"#111\",\n    justifyContent: \"flex-start\"\n  }\n});","map":{"version":3,"sources":["/Users/nikitahadnevic/Documents/JS_BackUp/JS/ReactNative/SmartTodo-Demo/App.js"],"names":["StatusBar","React","useState","useDispatch","useSelector","SET_FULL_LIST","Navbar","AddTodo","NoteListContainer","Provider","store","App","mainTodo","setMainTodo","addNotes","currentTitile","date","Date","toLocaleDateString","time","toLocaleTimeString","newTodo","id","now","toString","title","todoStatus","dispatch","prev","letDeleteTodo","filter","item","updateStatus","status","itemData","map","styles","mainContainer","StyleSheet","create","flex","flexDirection","backgroundColor","justifyContent"],"mappings":";;;;;;;;;AAAA,SAASA,SAAT,QAA0B,iBAA1B;AACA,OAAOC,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;;AAEA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,aAAT;AAEA,OAAOC,MAAP;AACA,OAAOC,OAAP;AACA,OAAOC,iBAAP;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA,OAAOC,KAAP;AAEA,eAAe,SAASC,GAAT,GAAe;AAC5B,kBAAgCT,QAAQ,CAAC,EAAD,CAAxC;AAAA;AAAA,MAAOU,QAAP;AAAA,MAAiBC,WAAjB;;AAEA,MAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACC,aAAD,EAAmB;AAClC,QAAMC,IAAI,GAAG,IAAIC,IAAJ,GAAWC,kBAAX,EAAb;AACA,QAAMC,IAAI,GAAG,IAAIF,IAAJ,GAAWG,kBAAX,EAAb;AACA,QAAMC,OAAO,GAAG;AACdC,MAAAA,EAAE,EAAEL,IAAI,CAACM,GAAL,GAAWC,QAAX,EADU;AAEdC,MAAAA,KAAK,EAAEV,aAFO;AAGdW,MAAAA,UAAU,EAAE,IAHE;AAIdV,MAAAA,IAAI,EAAKA,IAAL,SAAaG;AAJH,KAAhB;AAMAQ,IAAAA,QAAQ,CAACtB,aAAa,CAACgB,OAAD,CAAd,CAAR;AACAR,IAAAA,WAAW,CAAC,UAACe,IAAD;AAAA,0CAAcA,IAAd,IAAoBP,OAApB;AAAA,KAAD,CAAX;AACD,GAXD;;AAaA,MAAMQ,aAAa,GAAG,SAAhBA,aAAgB,CAACP,EAAD,EAAQ;AAC5BT,IAAAA,WAAW,CAAC,UAACe,IAAD;AAAA,aAAUA,IAAI,CAACE,MAAL,CAAY,UAACC,IAAD;AAAA,eAAUA,IAAI,CAACT,EAAL,KAAYA,EAAtB;AAAA,OAAZ,CAAV;AAAA,KAAD,CAAX;AACD,GAFD;;AAKA,MAAMU,YAAY,GAAG,SAAfA,YAAe,CAACV,EAAD,EAAKW,MAAL,EAAgB;AACnC,QAAMC,QAAQ,GAAGtB,QAAQ,CAACuB,GAAT,CAAa,UAACJ,IAAD;AAAA,aAC5BA,IAAI,CAACT,EAAL,KAAYA,EAAZ,mCAAsBS,IAAtB;AAA4BL,QAAAA,UAAU,EAAEO;AAAxC,WAAmDF,IADvB;AAAA,KAAb,CAAjB;AAGAlB,IAAAA,WAAW,oBAAKqB,QAAL,EAAX;AACD,GALD;;AAOA,SACE,oBAAC,QAAD;AAAU,IAAA,KAAK,EAAExB,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE0B,MAAM,CAACC,aAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,MAAD;AAAQ,IAAA,KAAK,EAAE,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAGE,oBAAC,OAAD;AAAS,IAAA,QAAQ,EAAEvB,QAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHF,EAKE,oBAAC,iBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALF,CADF,CADF;AAWD;AAED,IAAMsB,MAAM,GAAGE,UAAU,CAACC,MAAX,CAAkB;AAC/BF,EAAAA,aAAa,EAAE;AACbG,IAAAA,IAAI,EAAE,CADO;AAEbC,IAAAA,aAAa,EAAE,QAFF;AAGbC,IAAAA,eAAe,EAAE,MAHJ;AAIbC,IAAAA,cAAc,EAAE;AAJH;AADgB,CAAlB,CAAf","sourcesContent":["import { StatusBar } from \"expo-status-bar\";\nimport React, { useState } from \"react\";\nimport { StyleSheet, View } from \"react-native\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { SET_FULL_LIST } from \"./src/reduxApi/notesList/notesToolkit\";\n\nimport Navbar from \"./src/components/Navbar/Navbar\";\nimport AddTodo from \"./src/components/InputNoteField/InputNoteField\";\nimport NoteListContainer from \"./src/pages/NotesList/NoteListContainer\";\nimport { Provider } from \"react-redux\";\nimport store from \"./store\";\n\nexport default function App() {\n  const [mainTodo, setMainTodo] = useState([]);\n\n  const addNotes = (currentTitile) => {\n    const date = new Date().toLocaleDateString();\n    const time = new Date().toLocaleTimeString();\n    const newTodo = {\n      id: Date.now().toString(),\n      title: currentTitile,\n      todoStatus: true,\n      date: `${date} ${time}`,\n    };\n    dispatch(SET_FULL_LIST(newTodo));\n    setMainTodo((prev) => [...prev, newTodo]);\n  };\n\n  const letDeleteTodo = (id) => {\n    setMainTodo((prev) => prev.filter((item) => item.id !== id));\n  }; /* We have to delete my todo if item.id == id, or elem have to save if item.id !== id. Remember, filter return TRUE data */\n\n  /* Next time i going to do cheker for todoStatus in mainTodo-state, but i dont know how identificate elem-id from current element (like e.target.data-path in react)*/\n  const updateStatus = (id, status) => {\n    const itemData = mainTodo.map((item) =>\n      item.id === id ? { ...item, todoStatus: status } : item\n    );\n    setMainTodo([...itemData]);\n  };\n\n  return (\n    <Provider store={store}>\n      <View style={styles.mainContainer}>\n        <Navbar title={\"Yours Todo\"} />\n\n        <AddTodo addNotes={addNotes} />\n\n        <NoteListContainer />\n      </View>\n    </Provider>\n  );\n}\n\nconst styles = StyleSheet.create({\n  mainContainer: {\n    flex: 1,\n    flexDirection: \"column\",\n    backgroundColor: \"#111\",\n    justifyContent: \"flex-start\",\n  },\n});\n"]},"metadata":{},"sourceType":"module"}