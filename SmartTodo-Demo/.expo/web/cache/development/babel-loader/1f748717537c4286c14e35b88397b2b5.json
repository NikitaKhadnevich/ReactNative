{"ast":null,"code":"import React, { useEffect } from 'react';\nimport Animated, { Easing, useSharedValue, useAnimatedProps, withTiming, interpolateColor } from 'react-native-reanimated';\nimport Svg, { Path, Defs, ClipPath, G } from 'react-native-svg';\nimport AnimatedStroke from \"./animated-stroke\";\nvar MARGIN = 10;\nvar vWidth = 64 + MARGIN;\nvar vHeight = 64 + MARGIN;\nvar checkMarkPath = 'M15 31.1977C23.1081 36.4884 29.5946 43 29.5946 43C29.5946 43 37.5 25.5 69 1.5';\nvar outlineBoxPath = 'M24 0.5H40C48.5809 0.5 54.4147 2.18067 58.117 5.88299C61.8193 9.58532 63.5 15.4191 63.5 24V40C63.5 48.5809 61.8193 54.4147 58.117 58.117C54.4147 61.8193 48.5809 63.5 40 63.5H24C15.4191 63.5 9.58532 61.8193 5.88299 58.117C2.18067 54.4147 0.5 48.5809 0.5 40V24C0.5 15.4191 2.18067 9.58532 5.88299 5.88299C9.58532 2.18067 15.4191 0.5 24 0.5Z';\nvar AnimatedPath = Animated.createAnimatedComponent(Path);\n\nvar AnimatedCheckbox = function AnimatedCheckbox(props) {\n  var checked = props.checked,\n      checkmarkColor = props.checkmarkColor,\n      highlightColor = props.highlightColor,\n      boxOutlineColor = props.boxOutlineColor;\n  var progress = useSharedValue(0);\n  useEffect(function () {\n    progress.value = withTiming(checked ? 1 : 0, {\n      duration: checked ? 300 : 100,\n      easing: Easing.linear\n    });\n  }, [checked]);\n  var animatedBoxProps = useAnimatedProps(function () {\n    return {\n      stroke: interpolateColor(Easing.bezierFn(0.16, 1, 0.3, 1)(progress.value), [0, 1], [boxOutlineColor, highlightColor], 'RGB'),\n      fill: interpolateColor(Easing.bezierFn(0.16, 1, 0.3, 1)(progress.value), [0, 1], ['#00000000', highlightColor], 'RGB')\n    };\n  }, [highlightColor, boxOutlineColor]);\n  return React.createElement(Svg, {\n    viewBox: [-MARGIN, -MARGIN, vWidth + MARGIN, vHeight + MARGIN].join(' ')\n  }, React.createElement(Defs, null, React.createElement(ClipPath, {\n    id: \"clipPath\"\n  }, React.createElement(Path, {\n    fill: \"white\",\n    stroke: \"gray\",\n    strokeLinejoin: \"round\",\n    strokeLinecap: \"round\",\n    d: outlineBoxPath\n  }))), React.createElement(AnimatedStroke, {\n    progress: progress,\n    d: checkMarkPath,\n    stroke: highlightColor,\n    strokeWidth: 10,\n    strokeLinejoin: \"round\",\n    strokeLinecap: \"round\",\n    strokeOpacity: checked || false ? 1 : 0\n  }), React.createElement(AnimatedPath, {\n    d: outlineBoxPath,\n    strokeWidth: 7,\n    strokeLinejoin: \"round\",\n    strokeLinecap: \"round\",\n    animatedProps: animatedBoxProps\n  }), React.createElement(G, {\n    clipPath: \"url(#clipPath)\"\n  }, React.createElement(AnimatedStroke, {\n    progress: progress,\n    d: checkMarkPath,\n    stroke: checkmarkColor,\n    strokeWidth: 10,\n    strokeLinejoin: \"round\",\n    strokeLinecap: \"round\",\n    strokeOpacity: checked || false ? 1 : 0\n  })));\n};\n\nexport default AnimatedCheckbox;","map":{"version":3,"sources":["index.tsx"],"names":["MARGIN","vWidth","vHeight","checkMarkPath","outlineBoxPath","AnimatedPath","Animated","AnimatedCheckbox","props","boxOutlineColor","progress","useSharedValue","useEffect","withTiming","checked","duration","easing","Easing","linear","animatedBoxProps","useAnimatedProps","stroke","interpolateColor","fill"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react'\nimport Animated, {\n  Easing,\n  useSharedValue,\n  useAnimatedProps,\n  withTiming,\n  interpolateColor\n} from 'react-native-reanimated'\nimport Svg, { Path, Defs, ClipPath, G } from 'react-native-svg'\nimport AnimatedStroke from './animated-stroke'\n\nconst MARGIN = 10\nconst vWidth = 64 + MARGIN\nconst vHeight = 64 + MARGIN\nconst checkMarkPath =\n  'M15 31.1977C23.1081 36.4884 29.5946 43 29.5946 43C29.5946 43 37.5 25.5 69 1.5'\nconst outlineBoxPath =\n  'M24 0.5H40C48.5809 0.5 54.4147 2.18067 58.117 5.88299C61.8193 9.58532 63.5 15.4191 63.5 24V40C63.5 48.5809 61.8193 54.4147 58.117 58.117C54.4147 61.8193 48.5809 63.5 40 63.5H24C15.4191 63.5 9.58532 61.8193 5.88299 58.117C2.18067 54.4147 0.5 48.5809 0.5 40V24C0.5 15.4191 2.18067 9.58532 5.88299 5.88299C9.58532 2.18067 15.4191 0.5 24 0.5Z'\n\nconst AnimatedPath = Animated.createAnimatedComponent(Path)\n\ninterface Props {\n  checked?: boolean\n  highlightColor: string\n  checkmarkColor: string\n  boxOutlineColor: string\n}\n\nconst AnimatedCheckbox = (props: Props) => {\n  const { checked, checkmarkColor, highlightColor, boxOutlineColor } = props\n\n  const progress = useSharedValue(0)\n\n  useEffect(() => {\n    progress.value = withTiming(checked ? 1 : 0, {\n      duration: checked ? 300 : 100,\n      easing: Easing.linear\n    })\n  }, [checked])\n\n  const animatedBoxProps = useAnimatedProps(\n    () => ({\n      stroke: interpolateColor(\n        Easing.bezierFn(0.16, 1, 0.3, 1)(progress.value),\n        [0, 1],\n        [boxOutlineColor, highlightColor],\n        'RGB'\n      ),\n      fill: interpolateColor(\n        Easing.bezierFn(0.16, 1, 0.3, 1)(progress.value),\n        [0, 1],\n        ['#00000000', highlightColor],\n        'RGB'\n      )\n    }),\n    [highlightColor, boxOutlineColor]\n  )\n\n  return (\n    <Svg\n      viewBox={[-MARGIN, -MARGIN, vWidth + MARGIN, vHeight + MARGIN].join(' ')}\n    >\n      <Defs>\n        <ClipPath id=\"clipPath\">\n          <Path\n            fill=\"white\"\n            stroke=\"gray\"\n            strokeLinejoin=\"round\"\n            strokeLinecap=\"round\"\n            d={outlineBoxPath}\n          />\n        </ClipPath>\n      </Defs>\n      <AnimatedStroke\n        progress={progress}\n        d={checkMarkPath}\n        stroke={highlightColor}\n        strokeWidth={10}\n        strokeLinejoin=\"round\"\n        strokeLinecap=\"round\"\n        strokeOpacity={checked || false ? 1 : 0}\n      />\n      <AnimatedPath\n        d={outlineBoxPath}\n        strokeWidth={7}\n        strokeLinejoin=\"round\"\n        strokeLinecap=\"round\"\n        animatedProps={animatedBoxProps}\n      />\n      <G clipPath=\"url(#clipPath)\">\n        <AnimatedStroke\n          progress={progress}\n          d={checkMarkPath}\n          stroke={checkmarkColor}\n          strokeWidth={10}\n          strokeLinejoin=\"round\"\n          strokeLinecap=\"round\"\n          strokeOpacity={checked || false ? 1 : 0}\n        />\n      </G>\n    </Svg>\n  )\n}\n\nexport default AnimatedCheckbox\n"]},"metadata":{},"sourceType":"module"}