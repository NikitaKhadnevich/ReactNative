{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"progress\"];\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React, { useRef, useState } from 'react';\nimport Animated, { Easing, useAnimatedProps } from 'react-native-reanimated';\nimport { Path } from 'react-native-svg';\nvar AnimatedPath = Animated.createAnimatedComponent(Path);\n\nvar AnimatedStroke = function AnimatedStroke(_ref) {\n  var progress = _ref.progress,\n      pathProps = _objectWithoutProperties(_ref, _excluded);\n\n  var _useState = useState(0),\n      _useState2 = _slicedToArray(_useState, 2),\n      length = _useState2[0],\n      setLength = _useState2[1];\n\n  var ref = useRef(null);\n  var animatedProps = useAnimatedProps(function () {\n    return {\n      strokeDashoffset: Math.max(0, length - length * Easing.bezierFn(0.37, 0, 0.63, 1)(progress.value) - 0.1)\n    };\n  });\n  return React.createElement(AnimatedPath, _extends({\n    animatedProps: animatedProps,\n    onLayout: function onLayout() {\n      return setLength(ref.current.getTotalLength());\n    },\n    ref: ref,\n    strokeDasharray: length\n  }, pathProps));\n};\n\nexport default AnimatedStroke;","map":{"version":3,"sources":["animated-stroke.tsx"],"names":["AnimatedPath","Animated","AnimatedStroke","pathProps","useState","ref","useRef","animatedProps","useAnimatedProps","strokeDashoffset","Math","length","Easing","progress","setLength"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA,OAAA,KAAA,IAAA,MAAA,EAAA,QAAA,QAAA,OAAA;AACA,OAAA,QAAA,IAAA,MAAA,EAAA,gBAAA,QAAA,yBAAA;AACA,SAAA,IAAA,QAAA,kBAAA;AAMA,IAAMA,YAAY,GAAGC,QAAQ,CAARA,uBAAAA,CAArB,IAAqBA,CAArB;;AAEA,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAAA,IAAA,EAAqD;AAApD,MAAA,QAAA,GAAoD,IAApD,CAAA,QAAA;AAAA,MAAeC,SAAf,4BAAoD,IAApD;;AACtB,kBAA4BC,QAAQ,CAApC,CAAoC,CAApC;AAAA;AAAA,MAAM,MAAN;AAAA,MAAM,SAAN;;AACA,MAAMC,GAAG,GAAGC,MAAM,CAAlB,IAAkB,CAAlB;AACA,MAAMC,aAAa,GAAGC,gBAAgB,CAAC;AAAA,WAAO;AAC5CC,MAAAA,gBAAgB,EAAEC,IAAI,CAAJA,GAAAA,CAAAA,CAAAA,EAEhBC,MAAM,GAAGA,MAAM,GAAGC,MAAM,CAANA,QAAAA,CAAAA,IAAAA,EAAAA,CAAAA,EAAAA,IAAAA,EAAAA,CAAAA,EAAkCC,QAAQ,CAA5DF,KAAkBC,CAAlBD,GAFgBD,GAAAA;AAD0B,KAAP;AAAA,GAAD,CAAtC;AAOA,SACE,KAAA,CAAA,aAAA,CAAA,YAAA,EAAA,QAAA,CAAA;AACE,IAAA,aAAa,EADf,aAAA;AAGE,IAAA,QAAQ,EAAE;AAAA,aAAMI,SAAS,CAACT,GAAG,CAAHA,OAAAA,CAH5B,cAG4BA,EAAD,CAAf;AAAA,KAHZ;AAKE,IAAA,GAAG,EALL,GAAA;AAME,IAAA,eAAe,EAAEM;AANnB,GAAA,EADF,SACE,CAAA,CADF;AAVF,CAAA;;AAuBA,eAAA,cAAA","sourcesContent":["import React, { useRef, useState } from 'react'\nimport Animated, { Easing, useAnimatedProps } from 'react-native-reanimated'\nimport { Path, PathProps } from 'react-native-svg'\n\ninterface AnimatedStrokeProps extends PathProps {\n  progress: Animated.SharedValue<number>\n}\n\nconst AnimatedPath = Animated.createAnimatedComponent(Path)\n\nconst AnimatedStroke = ({ progress, ...pathProps }: AnimatedStrokeProps) => {\n  const [length, setLength] = useState(0)\n  const ref = useRef<typeof AnimatedPath>(null)\n  const animatedProps = useAnimatedProps(() => ({\n    strokeDashoffset: Math.max(\n      0,\n      length - length * Easing.bezierFn(0.37, 0, 0.63, 1)(progress.value) - 0.1\n    )\n  }))\n\n  return (\n    <AnimatedPath\n      animatedProps={animatedProps}\n      // @ts-ignore\n      onLayout={() => setLength(ref.current!.getTotalLength())}\n      // @ts-ignore\n      ref={ref}\n      strokeDasharray={length}\n      {...pathProps}\n    />\n  )\n}\n\nexport default AnimatedStroke\n"]},"metadata":{},"sourceType":"module"}